@using construccion.Shared.Entities
@using Construccion.WEB.Shared
@using Construccion.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository




<EditForm Model="Tareas" OnSubmit="OnSubmit">


    <DataAnnotationsValidator />

    <div class="mb-3">

        <label>Nombre:  </label>
        <div>
            <InputText width="10" @bind-Value="Tareas.Name" />
            <ValidationMessage For="@(()=>Tareas.Name)" />

        </div>
    </div>

    <div class="mb-3">

        <label>DESCRIPCION </label>
        <div>
            <InputText width="10" @bind-Value="Tareas.Description" />
            <ValidationMessage For="@(()=>Tareas.Description)" />

        </div>
    </div>
    <div class="mb-3">

        <label>FECHA DE INICIO </label>
        <div>
            <InputDate width="10" @bind-Value="Tareas.FechaStart" />
            <ValidationMessage For="@(()=>Tareas.FechaStart)" />

        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>

    <button class="btn btn-success" onclick="ReturnAction">Regresar</button>

    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" />Limpiar</button>







</EditForm>














@code {

    private EditContext editContext = null!;
    protected override void OnInitialized()
    {
        editContext = new EditContext(Tareas);
    }
    [EditorRequired]
    [Parameter]
    public Tarea Tareas { get; set; }

    [EditorRequired]
    [Parameter]

    public EventCallback OnSubmit { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormularioPosteadoConExito)
        {
            return;
        }

        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}


