@using construccion.Shared.Entities
@using Construccion.WEB.Shared
@using Construccion.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="projectconsts" OnSubmit="OnSubmit">

    <DataAnnotationsValidator />




    <div class="mb-3">
        <label>Nombre:  </label>
        <div>
            <InputText width="10" @bind-Value="projectconsts.Name" />
            <ValidationMessage For="@(()=>projectconsts.Name)" />
        </div>

    </div>


    <div class="mb-3">
        <label>Localizacion:  </label>
        <div>
            <InputText width="10" @bind-Value="projectconsts.Locate" />
            <ValidationMessage For="@(()=>projectconsts.Locate)" />
        </div>

    </div>

    <div class="mb-3">
        <label>Descripcion:  </label>
        <div>
            <InputText width="10" @bind-Value="projectconsts.Description" />
            <ValidationMessage For="@(()=>projectconsts.Description)" />
        </div>

    </div>

    <div class="mb-3">
        <label>Fecha Inicio:  </label>
        <div>
            <InputDate width="10" @bind-Value="projectconsts.FechaStart" />
            <ValidationMessage For="@(()=>projectconsts.FechaStart)" />
        </div>

    </div>

    <div class="mb-3">
        <label>Fecha fin:  </label>
        <div>
            <InputDate width="10" @bind-Value="projectconsts.FechaEnd" />
            <ValidationMessage For="@(()=>projectconsts.FechaEnd)" />
        </div>

    </div>




    <button class="btn btn-primary" type="submit">Guardar</button>

    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>

    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" />Limpiar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(projectconsts);
    }

    [Parameter]
    public ProjectConstr projectconsts { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormularioPosteadoConExito)
        {
            return;
        }

        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}
