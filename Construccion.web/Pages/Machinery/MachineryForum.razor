@using construccion.Shared.Entities
@using Construccion.WEB.Shared
@using Construccion.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model= "Machinery" OnSubmit= "OnSubmit">


    <DataAnnotationsValidator/>

    <div class ="mb-3">

        <label>Nombre</label>

        <div >

            <InputText class="form-control" @bind-Value="Machinery.name"></InputText>
            <ValidationMessage For="@(() => Machinery.name)" />

        </div>
        
    </div>

    <div class="mb-3">

        <label>Cantidad Requerida</label>

        <div>

            <InputText class="form-control" @bind-Value="Machinery.CantReque"></InputText>
            <ValidationMessage For="@(() => Machinery.CantReque)" />

        </div>

    </div>

    <div class="mb-3">

        <label>Proveedor</label>

        <div>

            <InputText class="form-control" @bind-Value="Machinery.Proveed"></InputText>
            <ValidationMessage For="@(() => Machinery.Proveed)" />

        </div>

    </div>

    <div class="mb-3">

        <label>Fecha de entrega</label>

        <div>

            <InputDate class="form-control" @bind-Value="Machinery.FechaEntrga"></InputDate>
            <ValidationMessage For="@(() => Machinery.FechaEntrga)" />

        </div>

    </div>


    <div class="mb-3">

        <label>Proyecto de construccion</label>

        <div>

            <InputNumber class="form-control" @bind-Value="Machinery.ProjectConstrId"></InputNumber>
            <ValidationMessage For="@(() => Machinery.ProjectConstrId)" />

        </div>

    </div>

    <div class="mb-3">

        <label>TAREA ASOCIADA</label>

        <div>

            <InputNumber class="form-control" @bind-Value="Machinery.ProjectTareas"></InputNumber>
            <ValidationMessage For="@(() => Machinery.ProjectTareas)" />

        </div>

    </div>

    <button class="btn  btn-primary" type="submit">GUARDAR </button>

    <button class="btn btn-success" onclick="ReturnAction">REGRESAR </button> 

    <button class="btn btn-info" onclick="Reset">RESET </button>


</EditForm> 







@code {

    private EditContext editContext = null!;
    protected override void OnInitialized()
    {
        editContext = new (Machinery);
    }


    [EditorRequired]
    [Parameter]

    public machinery Machinery { get; set; }



    [EditorRequired]
    [Parameter]

    public EventCallback OnSubmit { get; set; }


    [EditorRequired]
    [Parameter]

    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado)
        {
            return;
        }

        if (FormularioPosteadoConExito)
        {
            return;
        }

        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }


}
