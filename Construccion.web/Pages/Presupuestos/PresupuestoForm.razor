@using construccion.Shared.Entities
@using Construccion.WEB.Shared
@using Construccion.WEB.Repositories
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<EditForm Model="Presupuesto" OnSubmit="OnSubmit">
    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label>Mano de obra:  </label>
        <div>
            <InputNumber width="10" @bind-Value="Presupuesto.ManoObra" />
            <ValidationMessage For="@(()=>Presupuesto.ManoObra)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Materiales:  </label>
        <div>
            <InputNumber width="10" @bind-Value="Presupuesto.Material" />
            <ValidationMessage For="@(()=>Presupuesto.Material)" />
        </div>
    </div>

    <div class="mb-3">
        <label>Maquinaria:  </label>
        <div>
            <InputNumber width="10" @bind-Value="Presupuesto.Maquinaria" />
            <ValidationMessage For="@(()=>Presupuesto.Maquinaria)" />
        </div>
    </div>
    <div class="mb-3">
        <label>Otros:  </label>
        <div>
            <InputNumber width="10" @bind-Value="Presupuesto.Otros" />
            <ValidationMessage For="@(()=>Presupuesto.Otros)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
    <button class="btn btn-info" type="reset"><i class="bi bi-x-circle" />Limpiar</button>
</EditForm>






@code {
    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Presupuesto);
    }

    [EditorRequired]
    [Parameter]
    public Presupuesto Presupuesto { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormularioPosteadoConExito { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formularioFueEditado = editContext.IsModified();

        if (!formularioFueEditado || FormularioPosteadoConExito)
        {
            return;
        }

        var resultado = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirmado = !string.IsNullOrEmpty(resultado.Value);

        if (confirmado)
        {
            return;
        }

        context.PreventNavigation();
    }
}